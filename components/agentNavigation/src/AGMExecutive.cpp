// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AGMExecutive.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <AGMExecutive.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompAGMExecutive__AGMExecutive__activate_name = "activate";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__deactivate_name = "deactivate";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__reset_name = "reset";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__modificationProposal_name = "modificationProposal";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__setMission_name = "setMission";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__getData_name = "getData";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name = "broadcastModel";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name = "broadcastPlan";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name = "update";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__successFulChange_name = "successFulChange";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__aimedChange_name = "aimedChange";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__invalidChange_name = "invalidChange";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name = "structuralChange";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name = "symbolUpdated";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name = "edgeUpdated";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name = "edgesUpdated";

}
::IceProxy::Ice::Object* ::IceProxy::RoboCompAGMExecutive::upCast(::IceProxy::RoboCompAGMExecutive::AGMExecutive* p) { return p; }

void
::IceProxy::RoboCompAGMExecutive::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutive>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompAGMExecutive::AGMExecutive;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::activate(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__activate_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->activate(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__activate_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__activate_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_activate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__activate_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::deactivate(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__deactivate_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->deactivate(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__deactivate_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__deactivate_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_deactivate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__deactivate_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::reset(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__reset_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->reset(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_reset(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__reset_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__reset_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_reset(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__reset_name);
}

bool
IceProxy::RoboCompAGMExecutive::AGMExecutive::modificationProposal(const ::RoboCompAGMWorldModel::Event& modification, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__modificationProposal_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__modificationProposal_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            return __del->modificationProposal(modification, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_modificationProposal(const ::RoboCompAGMWorldModel::Event& modification, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__modificationProposal_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__modificationProposal_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__modificationProposal_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_modificationProposal(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompAGMExecutive__AGMExecutive__modificationProposal_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::setMission(const ::std::string& path, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__setMission_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->setMission(path, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission(const ::std::string& path, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__setMission_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__setMission_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(path);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_setMission(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__setMission_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::getData(::RoboCompAGMWorldModel::World& world, ::RoboCompAGMWorldModel::World& target, ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__getData_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__getData_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->getData(world, target, plan, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getData(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__getData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__getData_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__getData_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_getData(::RoboCompAGMWorldModel::World& world, ::RoboCompAGMWorldModel::World& target, ::RoboCompPlanning::Plan& plan, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompAGMExecutive__AGMExecutive__getData_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(world);
        __is->read(target);
        __is->read(plan);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::broadcastModel(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->broadcastModel(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__broadcastModel_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_broadcastModel(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::broadcastPlan(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->broadcastPlan(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_broadcastPlan(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name);
}

const ::std::string&
IceProxy::RoboCompAGMExecutive::AGMExecutive::ice_staticId()
{
    return ::RoboCompAGMExecutive::AGMExecutive::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutive::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompAGMExecutive::AGMExecutive);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutive::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompAGMExecutive::AGMExecutive);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompAGMExecutive::AGMExecutive::__newInstance() const
{
    return new AGMExecutive;
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompAGMExecutive::upCast(::IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* p) { return p; }

void
::IceProxy::RoboCompAGMExecutive::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::update(const ::RoboCompAGMWorldModel::World& world, const ::RoboCompAGMWorldModel::World& target, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*>(__delBase.get());
            __del->update(world, target, plan, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::begin_update(const ::RoboCompAGMWorldModel::World& world, const ::RoboCompAGMWorldModel::World& target, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(world);
        __os->write(target);
        __os->write(plan);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::end_update(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::successFulChange(const ::RoboCompPlanning::ActionSequence& actions, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__successFulChange_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*>(__delBase.get());
            __del->successFulChange(actions, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::begin_successFulChange(const ::RoboCompPlanning::ActionSequence& actions, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__successFulChange_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__successFulChange_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(actions);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::end_successFulChange(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__successFulChange_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::aimedChange(const ::RoboCompPlanning::Action& action, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__aimedChange_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*>(__delBase.get());
            __del->aimedChange(action, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::begin_aimedChange(const ::RoboCompPlanning::Action& action, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__aimedChange_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__aimedChange_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(action);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::end_aimedChange(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__aimedChange_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::invalidChange(const ::std::string& agent, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__invalidChange_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*>(__delBase.get());
            __del->invalidChange(agent, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::begin_invalidChange(const ::std::string& agent, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__invalidChange_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__invalidChange_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(agent);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::end_invalidChange(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__invalidChange_name);
}

const ::std::string&
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_staticId()
{
    return ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__newInstance() const
{
    return new AGMExecutiveVisualizationTopic;
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompAGMExecutive::upCast(::IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic* p) { return p; }

void
::IceProxy::RoboCompAGMExecutive::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::structuralChange(const ::RoboCompAGMWorldModel::Event& modification, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic*>(__delBase.get());
            __del->structuralChange(modification, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::begin_structuralChange(const ::RoboCompAGMWorldModel::Event& modification, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::end_structuralChange(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic*>(__delBase.get());
            __del->symbolUpdated(modification, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::end_symbolUpdated(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic*>(__delBase.get());
            __del->edgeUpdated(modification, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::end_edgeUpdated(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic*>(__delBase.get());
            __del->edgesUpdated(modifications, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(modifications);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::end_edgesUpdated(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name);
}

const ::std::string&
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::ice_staticId()
{
    return ::RoboCompAGMExecutive::AGMExecutiveTopic::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompAGMExecutive::AGMExecutiveTopic);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompAGMExecutive::AGMExecutiveTopic);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::__newInstance() const
{
    return new AGMExecutiveTopic;
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::activate(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__activate_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::deactivate(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__deactivate_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::reset(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__reset_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

bool
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::modificationProposal(const ::RoboCompAGMWorldModel::Event& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__modificationProposal_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::setMission(const ::std::string& path, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__setMission_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(path);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::getData(::RoboCompAGMWorldModel::World& world, ::RoboCompAGMWorldModel::World& target, ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__getData_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(world);
        __is->read(target);
        __is->read(plan);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::broadcastModel(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::broadcastPlan(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::update(const ::RoboCompAGMWorldModel::World& world, const ::RoboCompAGMWorldModel::World& target, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(world);
        __os->write(target);
        __os->write(plan);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::successFulChange(const ::RoboCompPlanning::ActionSequence& actions, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__successFulChange_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(actions);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::aimedChange(const ::RoboCompPlanning::Action& action, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__aimedChange_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(action);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::invalidChange(const ::std::string& agent, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__invalidChange_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(agent);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveTopic::structuralChange(const ::RoboCompAGMWorldModel::Event& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveTopic::symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveTopic::edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveTopic::edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(modifications);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::activate(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->activate(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__activate_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::deactivate(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->deactivate(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__deactivate_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::reset(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->reset(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__reset_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

bool
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::modificationProposal(const ::RoboCompAGMWorldModel::Event& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::RoboCompAGMWorldModel::Event& __p_modification, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_modification(__p_modification)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->modificationProposal(_m_modification, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::RoboCompAGMWorldModel::Event& _m_modification;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__modificationProposal_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, modification, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::setMission(const ::std::string& path, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_path, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_path(__p_path)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setMission(_m_path, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_path;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__setMission_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(path, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::getData(::RoboCompAGMWorldModel::World& world, ::RoboCompAGMWorldModel::World& target, ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompAGMWorldModel::World& __p_world, ::RoboCompAGMWorldModel::World& __p_target, ::RoboCompPlanning::Plan& __p_plan, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_world(__p_world),
            _m_target(__p_target),
            _m_plan(__p_plan)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->getData(_m_world, _m_target, _m_plan, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RoboCompAGMWorldModel::World& _m_world;
        ::RoboCompAGMWorldModel::World& _m_target;
        ::RoboCompPlanning::Plan& _m_plan;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__getData_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(world, target, plan, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::broadcastModel(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->broadcastModel(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::broadcastPlan(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->broadcastPlan(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::update(const ::RoboCompAGMWorldModel::World& world, const ::RoboCompAGMWorldModel::World& target, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::World& __p_world, const ::RoboCompAGMWorldModel::World& __p_target, const ::RoboCompPlanning::Plan& __p_plan, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_world(__p_world),
            _m_target(__p_target),
            _m_plan(__p_plan)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->update(_m_world, _m_target, _m_plan, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::World& _m_world;
        const ::RoboCompAGMWorldModel::World& _m_target;
        const ::RoboCompPlanning::Plan& _m_plan;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(world, target, plan, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::successFulChange(const ::RoboCompPlanning::ActionSequence& actions, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompPlanning::ActionSequence& __p_actions, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_actions(__p_actions)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->successFulChange(_m_actions, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompPlanning::ActionSequence& _m_actions;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__successFulChange_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(actions, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::aimedChange(const ::RoboCompPlanning::Action& action, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompPlanning::Action& __p_action, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_action(__p_action)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->aimedChange(_m_action, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompPlanning::Action& _m_action;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__aimedChange_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(action, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::invalidChange(const ::std::string& agent, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_agent, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_agent(__p_agent)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->invalidChange(_m_agent, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_agent;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__invalidChange_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(agent, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveTopic::structuralChange(const ::RoboCompAGMWorldModel::Event& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::Event& __p_modification, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_modification(__p_modification)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->structuralChange(_m_modification, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::Event& _m_modification;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(modification, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveTopic::symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::Node& __p_modification, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_modification(__p_modification)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->symbolUpdated(_m_modification, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::Node& _m_modification;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(modification, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveTopic::edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::Edge& __p_modification, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_modification(__p_modification)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->edgeUpdated(_m_modification, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::Edge& _m_modification;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(modification, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveTopic::edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::EdgeSequence& __p_modifications, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_modifications(__p_modifications)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->edgesUpdated(_m_modifications, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::EdgeSequence& _m_modifications;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(modifications, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* RoboCompAGMExecutive::upCast(::RoboCompAGMExecutive::AGMExecutive* p) { return p; }

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutive_ids[2] =
{
    "::Ice::Object",
    "::RoboCompAGMExecutive::AGMExecutive"
};

}

bool
RoboCompAGMExecutive::AGMExecutive::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompAGMExecutive__AGMExecutive_ids, __RoboCompAGMExecutive__AGMExecutive_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompAGMExecutive::AGMExecutive::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompAGMExecutive__AGMExecutive_ids[0], &__RoboCompAGMExecutive__AGMExecutive_ids[2]);
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutive::ice_id(const ::Ice::Current&) const
{
    return __RoboCompAGMExecutive__AGMExecutive_ids[1];
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutive::ice_staticId()
{
    return __RoboCompAGMExecutive__AGMExecutive_ids[1];
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___activate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    activate(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___deactivate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    deactivate(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___reset(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    reset(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___modificationProposal(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::Event modification;
    __is->read(modification);
    __inS.endReadParams();
    bool __ret = modificationProposal(modification, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___setMission(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string path;
    __is->read(path);
    __inS.endReadParams();
    setMission(path, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___getData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompAGMWorldModel::World world;
    ::RoboCompAGMWorldModel::World target;
    ::RoboCompPlanning::Plan plan;
    getData(world, target, plan, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(world);
    __os->write(target);
    __os->write(plan);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___broadcastModel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    broadcastModel(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___broadcastPlan(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    broadcastPlan(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutive_all[] =
{
    "activate",
    "broadcastModel",
    "broadcastPlan",
    "deactivate",
    "getData",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "modificationProposal",
    "reset",
    "setMission"
};

}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompAGMExecutive__AGMExecutive_all, __RoboCompAGMExecutive__AGMExecutive_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompAGMExecutive__AGMExecutive_all)
    {
        case 0:
        {
            return ___activate(in, current);
        }
        case 1:
        {
            return ___broadcastModel(in, current);
        }
        case 2:
        {
            return ___broadcastPlan(in, current);
        }
        case 3:
        {
            return ___deactivate(in, current);
        }
        case 4:
        {
            return ___getData(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
        case 9:
        {
            return ___modificationProposal(in, current);
        }
        case 10:
        {
            return ___reset(in, current);
        }
        case 11:
        {
            return ___setMission(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompAGMExecutive::AGMExecutive::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompAGMExecutive::AGMExecutive::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompAGMExecutive::__patch(AGMExecutivePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompAGMExecutive::AGMExecutivePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompAGMExecutive::AGMExecutive::ice_staticId(), v);
    }
}

::Ice::Object* RoboCompAGMExecutive::upCast(::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* p) { return p; }

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids[2] =
{
    "::Ice::Object",
    "::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic"
};

}

bool
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids[0], &__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids[2]);
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_id(const ::Ice::Current&) const
{
    return __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids[1];
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_staticId()
{
    return __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids[1];
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::___update(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::World world;
    ::RoboCompAGMWorldModel::World target;
    ::RoboCompPlanning::Plan plan;
    __is->read(world);
    __is->read(target);
    __is->read(plan);
    __inS.endReadParams();
    update(world, target, plan, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::___successFulChange(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompPlanning::ActionSequence actions;
    __is->read(actions);
    __inS.endReadParams();
    successFulChange(actions, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::___aimedChange(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompPlanning::Action action;
    __is->read(action);
    __inS.endReadParams();
    aimedChange(action, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::___invalidChange(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string agent;
    __is->read(agent);
    __inS.endReadParams();
    invalidChange(agent, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_all[] =
{
    "aimedChange",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "invalidChange",
    "successFulChange",
    "update"
};

}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_all, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_all)
    {
        case 0:
        {
            return ___aimedChange(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___invalidChange(in, current);
        }
        case 6:
        {
            return ___successFulChange(in, current);
        }
        case 7:
        {
            return ___update(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompAGMExecutive::__patch(AGMExecutiveVisualizationTopicPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopicPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_staticId(), v);
    }
}

::Ice::Object* RoboCompAGMExecutive::upCast(::RoboCompAGMExecutive::AGMExecutiveTopic* p) { return p; }

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic_ids[2] =
{
    "::Ice::Object",
    "::RoboCompAGMExecutive::AGMExecutiveTopic"
};

}

bool
RoboCompAGMExecutive::AGMExecutiveTopic::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompAGMExecutive__AGMExecutiveTopic_ids, __RoboCompAGMExecutive__AGMExecutiveTopic_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompAGMExecutive::AGMExecutiveTopic::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompAGMExecutive__AGMExecutiveTopic_ids[0], &__RoboCompAGMExecutive__AGMExecutiveTopic_ids[2]);
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutiveTopic::ice_id(const ::Ice::Current&) const
{
    return __RoboCompAGMExecutive__AGMExecutiveTopic_ids[1];
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutiveTopic::ice_staticId()
{
    return __RoboCompAGMExecutive__AGMExecutiveTopic_ids[1];
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveTopic::___structuralChange(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::Event modification;
    __is->read(modification);
    __inS.endReadParams();
    structuralChange(modification, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveTopic::___symbolUpdated(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::Node modification;
    __is->read(modification);
    __inS.endReadParams();
    symbolUpdated(modification, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveTopic::___edgeUpdated(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::Edge modification;
    __is->read(modification);
    __inS.endReadParams();
    edgeUpdated(modification, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveTopic::___edgesUpdated(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::EdgeSequence modifications;
    __is->read(modifications);
    __inS.endReadParams();
    edgesUpdated(modifications, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic_all[] =
{
    "edgeUpdated",
    "edgesUpdated",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "structuralChange",
    "symbolUpdated"
};

}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveTopic::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompAGMExecutive__AGMExecutiveTopic_all, __RoboCompAGMExecutive__AGMExecutiveTopic_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompAGMExecutive__AGMExecutiveTopic_all)
    {
        case 0:
        {
            return ___edgeUpdated(in, current);
        }
        case 1:
        {
            return ___edgesUpdated(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___structuralChange(in, current);
        }
        case 7:
        {
            return ___symbolUpdated(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompAGMExecutive::AGMExecutiveTopic::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompAGMExecutive::AGMExecutiveTopic::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompAGMExecutive::__patch(AGMExecutiveTopicPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompAGMExecutive::AGMExecutiveTopicPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompAGMExecutive::AGMExecutiveTopic::ice_staticId(), v);
    }
}
