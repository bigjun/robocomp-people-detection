// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AGMCommonBehavior.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____AGMCommonBehavior_h__
#define ____AGMCommonBehavior_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMCommonBehavior::AGMCommonBehavior>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompAGMCommonBehavior::AGMCommonBehavior*);

}

}

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior;
bool operator==(const AGMCommonBehavior&, const AGMCommonBehavior&);
bool operator<(const AGMCommonBehavior&, const AGMCommonBehavior&);
::Ice::Object* upCast(::RoboCompAGMCommonBehavior::AGMCommonBehavior*);
typedef ::IceInternal::Handle< ::RoboCompAGMCommonBehavior::AGMCommonBehavior> AGMCommonBehaviorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMCommonBehavior::AGMCommonBehavior> AGMCommonBehaviorPrx;
void __patch(AGMCommonBehaviorPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompAGMCommonBehavior
{

enum StateEnum
{
    Starting,
    Running,
    Stopped
};

struct StateStruct
{
    ::RoboCompAGMCommonBehavior::StateEnum state;
    ::std::string info;

    bool operator==(const StateStruct& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        if(info != __rhs.info)
        {
            return false;
        }
        return true;
    }

    bool operator<(const StateStruct& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        if(info < __rhs.info)
        {
            return true;
        }
        else if(__rhs.info < info)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const StateStruct& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const StateStruct& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const StateStruct& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const StateStruct& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct Parameter
{
    bool editable;
    ::std::string value;
    ::std::string type;

    bool operator==(const Parameter& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(editable != __rhs.editable)
        {
            return false;
        }
        if(value != __rhs.value)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Parameter& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(editable < __rhs.editable)
        {
            return true;
        }
        else if(__rhs.editable < editable)
        {
            return false;
        }
        if(value < __rhs.value)
        {
            return true;
        }
        else if(__rhs.value < value)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Parameter& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Parameter& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Parameter& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Parameter& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::map< ::std::string, ::RoboCompAGMCommonBehavior::Parameter> ParameterMap;

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompAGMCommonBehavior::StateEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompAGMCommonBehavior::StateStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompAGMCommonBehavior::StateStruct, S>
{
    static void write(S* __os, const ::RoboCompAGMCommonBehavior::StateStruct& v)
    {
        __os->write(v.state);
        __os->write(v.info);
    }
};

template<class S>
struct StreamReader< ::RoboCompAGMCommonBehavior::StateStruct, S>
{
    static void read(S* __is, ::RoboCompAGMCommonBehavior::StateStruct& v)
    {
        __is->read(v.state);
        __is->read(v.info);
    }
};

template<>
struct StreamableTraits< ::RoboCompAGMCommonBehavior::Parameter>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompAGMCommonBehavior::Parameter, S>
{
    static void write(S* __os, const ::RoboCompAGMCommonBehavior::Parameter& v)
    {
        __os->write(v.editable);
        __os->write(v.value);
        __os->write(v.type);
    }
};

template<class S>
struct StreamReader< ::RoboCompAGMCommonBehavior::Parameter, S>
{
    static void read(S* __is, ::RoboCompAGMCommonBehavior::Parameter& v)
    {
        __is->read(v.editable);
        __is->read(v.value);
        __is->read(v.type);
    }
};

}

namespace RoboCompAGMCommonBehavior
{

class Callback_AGMCommonBehavior_activateAgent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_activateAgent_Base> Callback_AGMCommonBehavior_activateAgentPtr;

class Callback_AGMCommonBehavior_deactivateAgent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_deactivateAgent_Base> Callback_AGMCommonBehavior_deactivateAgentPtr;

class Callback_AGMCommonBehavior_getAgentState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_getAgentState_Base> Callback_AGMCommonBehavior_getAgentStatePtr;

class Callback_AGMCommonBehavior_getAgentParameters_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_getAgentParameters_Base> Callback_AGMCommonBehavior_getAgentParametersPtr;

class Callback_AGMCommonBehavior_setAgentParameters_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_setAgentParameters_Base> Callback_AGMCommonBehavior_setAgentParametersPtr;

class Callback_AGMCommonBehavior_killAgent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_killAgent_Base> Callback_AGMCommonBehavior_killAgentPtr;

class Callback_AGMCommonBehavior_uptimeAgent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_uptimeAgent_Base> Callback_AGMCommonBehavior_uptimeAgentPtr;

class Callback_AGMCommonBehavior_reloadConfigAgent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_reloadConfigAgent_Base> Callback_AGMCommonBehavior_reloadConfigAgentPtr;

}

namespace IceProxy
{

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior : virtual public ::IceProxy::Ice::Object
{
public:

    bool activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs)
    {
        return activateAgent(prs, 0);
    }
    bool activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx)
    {
        return activateAgent(prs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_activateAgent(prs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activateAgent(prs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_activateAgent(prs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activateAgent(prs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_activateAgent(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_activateAgent(prs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs)
    {
        return begin_activateAgent(prs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx)
    {
        return begin_activateAgent(prs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateAgent(prs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateAgent(prs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_activateAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateAgent(prs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_activateAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateAgent(prs, &__ctx, __del, __cookie);
    }

    bool end_activateAgent(const ::Ice::AsyncResultPtr&);
    
private:

    bool activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool deactivateAgent()
    {
        return deactivateAgent(0);
    }
    bool deactivateAgent(const ::Ice::Context& __ctx)
    {
        return deactivateAgent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deactivateAgent(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deactivateAgent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deactivateAgent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deactivateAgent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deactivateAgent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deactivateAgent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deactivateAgent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deactivateAgent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deactivateAgent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_deactivateAgent(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_deactivateAgent(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deactivateAgent()
    {
        return begin_deactivateAgent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deactivateAgent(const ::Ice::Context& __ctx)
    {
        return begin_deactivateAgent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deactivateAgent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivateAgent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivateAgent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivateAgent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivateAgent(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_deactivateAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivateAgent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivateAgent(const ::Ice::Context& __ctx, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_deactivateAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivateAgent(&__ctx, __del, __cookie);
    }

    bool end_deactivateAgent(const ::Ice::AsyncResultPtr&);
    
private:

    bool deactivateAgent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deactivateAgent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompAGMCommonBehavior::StateStruct getAgentState()
    {
        return getAgentState(0);
    }
    ::RoboCompAGMCommonBehavior::StateStruct getAgentState(const ::Ice::Context& __ctx)
    {
        return getAgentState(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAgentState(const ::IceInternal::Function<void (const ::RoboCompAGMCommonBehavior::StateStruct&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAgentState(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAgentState(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAgentState(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAgentState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMCommonBehavior::StateStruct&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAgentState(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAgentState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAgentState(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAgentState(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMCommonBehavior::StateStruct&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompAGMCommonBehavior::StateStruct&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
                ::RoboCompAGMCommonBehavior::StateStruct __ret;
                try
                {
                    __ret = __proxy->end_getAgentState(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompAGMCommonBehavior::StateStruct&)> _response;
        };
        return begin_getAgentState(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAgentState()
    {
        return begin_getAgentState(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAgentState(const ::Ice::Context& __ctx)
    {
        return begin_getAgentState(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAgentState(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAgentState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentState(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAgentState(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentState(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_getAgentStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAgentState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentState(const ::Ice::Context& __ctx, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_getAgentStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAgentState(&__ctx, __del, __cookie);
    }

    ::RoboCompAGMCommonBehavior::StateStruct end_getAgentState(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompAGMCommonBehavior::StateStruct getAgentState(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAgentState(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompAGMCommonBehavior::ParameterMap getAgentParameters()
    {
        return getAgentParameters(0);
    }
    ::RoboCompAGMCommonBehavior::ParameterMap getAgentParameters(const ::Ice::Context& __ctx)
    {
        return getAgentParameters(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAgentParameters(const ::IceInternal::Function<void (const ::RoboCompAGMCommonBehavior::ParameterMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAgentParameters(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAgentParameters(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAgentParameters(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAgentParameters(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMCommonBehavior::ParameterMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAgentParameters(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAgentParameters(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAgentParameters(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAgentParameters(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMCommonBehavior::ParameterMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompAGMCommonBehavior::ParameterMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
                ::RoboCompAGMCommonBehavior::ParameterMap __ret;
                try
                {
                    __ret = __proxy->end_getAgentParameters(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompAGMCommonBehavior::ParameterMap&)> _response;
        };
        return begin_getAgentParameters(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAgentParameters()
    {
        return begin_getAgentParameters(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAgentParameters(const ::Ice::Context& __ctx)
    {
        return begin_getAgentParameters(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAgentParameters(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAgentParameters(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentParameters(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAgentParameters(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentParameters(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_getAgentParametersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAgentParameters(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentParameters(const ::Ice::Context& __ctx, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_getAgentParametersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAgentParameters(&__ctx, __del, __cookie);
    }

    ::RoboCompAGMCommonBehavior::ParameterMap end_getAgentParameters(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompAGMCommonBehavior::ParameterMap getAgentParameters(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAgentParameters(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs)
    {
        return setAgentParameters(prs, 0);
    }
    bool setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx)
    {
        return setAgentParameters(prs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setAgentParameters(prs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAgentParameters(prs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setAgentParameters(prs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAgentParameters(prs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_setAgentParameters(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_setAgentParameters(prs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs)
    {
        return begin_setAgentParameters(prs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx)
    {
        return begin_setAgentParameters(prs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAgentParameters(prs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAgentParameters(prs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_setAgentParametersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAgentParameters(prs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& prs, const ::Ice::Context& __ctx, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_setAgentParametersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAgentParameters(prs, &__ctx, __del, __cookie);
    }

    bool end_setAgentParameters(const ::Ice::AsyncResultPtr&);
    
private:

    bool setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void killAgent()
    {
        killAgent(0);
    }
    void killAgent(const ::Ice::Context& __ctx)
    {
        killAgent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_killAgent(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_killAgent(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_killAgent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_killAgent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_killAgent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_killAgent(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_killAgent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_killAgent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_killAgent()
    {
        return begin_killAgent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_killAgent(const ::Ice::Context& __ctx)
    {
        return begin_killAgent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_killAgent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_killAgent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_killAgent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_killAgent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_killAgent(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_killAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_killAgent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_killAgent(const ::Ice::Context& __ctx, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_killAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_killAgent(&__ctx, __del, __cookie);
    }

    void end_killAgent(const ::Ice::AsyncResultPtr&);
    
private:

    void killAgent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_killAgent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int uptimeAgent()
    {
        return uptimeAgent(0);
    }
    ::Ice::Int uptimeAgent(const ::Ice::Context& __ctx)
    {
        return uptimeAgent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_uptimeAgent(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uptimeAgent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uptimeAgent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uptimeAgent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_uptimeAgent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_uptimeAgent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_uptimeAgent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_uptimeAgent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_uptimeAgent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_uptimeAgent(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_uptimeAgent(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_uptimeAgent()
    {
        return begin_uptimeAgent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uptimeAgent(const ::Ice::Context& __ctx)
    {
        return begin_uptimeAgent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uptimeAgent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uptimeAgent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uptimeAgent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uptimeAgent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uptimeAgent(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_uptimeAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uptimeAgent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_uptimeAgent(const ::Ice::Context& __ctx, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_uptimeAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_uptimeAgent(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_uptimeAgent(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int uptimeAgent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_uptimeAgent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool reloadConfigAgent()
    {
        return reloadConfigAgent(0);
    }
    bool reloadConfigAgent(const ::Ice::Context& __ctx)
    {
        return reloadConfigAgent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadConfigAgent(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reloadConfigAgent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reloadConfigAgent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadConfigAgent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadConfigAgent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reloadConfigAgent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reloadConfigAgent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadConfigAgent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_reloadConfigAgent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_reloadConfigAgent(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_reloadConfigAgent(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_reloadConfigAgent()
    {
        return begin_reloadConfigAgent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadConfigAgent(const ::Ice::Context& __ctx)
    {
        return begin_reloadConfigAgent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadConfigAgent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadConfigAgent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfigAgent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadConfigAgent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfigAgent(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_reloadConfigAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadConfigAgent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfigAgent(const ::Ice::Context& __ctx, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_reloadConfigAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadConfigAgent(&__ctx, __del, __cookie);
    }

    bool end_reloadConfigAgent(const ::Ice::AsyncResultPtr&);
    
private:

    bool reloadConfigAgent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadConfigAgent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_secure(bool __secure) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_twoway() const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_oneway() const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_batchOneway() const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_datagram() const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_batchDatagram() const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_compress(bool __compress) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AGMCommonBehavior> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AGMCommonBehavior*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool deactivateAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompAGMCommonBehavior::StateStruct getAgentState(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompAGMCommonBehavior::ParameterMap getAgentParameters(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void killAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int uptimeAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool reloadConfigAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior : virtual public ::IceDelegate::RoboCompAGMCommonBehavior::AGMCommonBehavior,
                          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deactivateAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompAGMCommonBehavior::StateStruct getAgentState(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompAGMCommonBehavior::ParameterMap getAgentParameters(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void killAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int uptimeAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool reloadConfigAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior : virtual public ::IceDelegate::RoboCompAGMCommonBehavior::AGMCommonBehavior,
                          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deactivateAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompAGMCommonBehavior::StateStruct getAgentState(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompAGMCommonBehavior::ParameterMap getAgentParameters(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void killAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int uptimeAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool reloadConfigAgent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior : virtual public ::Ice::Object
{
public:

    typedef AGMCommonBehaviorPrx ProxyType;
    typedef AGMCommonBehaviorPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___activateAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool deactivateAgent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deactivateAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompAGMCommonBehavior::StateStruct getAgentState(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAgentState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompAGMCommonBehavior::ParameterMap getAgentParameters(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAgentParameters(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setAgentParameters(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void killAgent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___killAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int uptimeAgent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___uptimeAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool reloadConfigAgent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadConfigAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const AGMCommonBehavior& l, const AGMCommonBehavior& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AGMCommonBehavior& l, const AGMCommonBehavior& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompAGMCommonBehavior
{

template<class T>
class CallbackNC_AGMCommonBehavior_activateAgent : public Callback_AGMCommonBehavior_activateAgent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_AGMCommonBehavior_activateAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_activateAgent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AGMCommonBehavior_activateAgentPtr
newCallback_AGMCommonBehavior_activateAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_activateAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_activateAgentPtr
newCallback_AGMCommonBehavior_activateAgent(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_activateAgent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_activateAgent : public Callback_AGMCommonBehavior_activateAgent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_AGMCommonBehavior_activateAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_activateAgent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_activateAgentPtr
newCallback_AGMCommonBehavior_activateAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_activateAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_activateAgentPtr
newCallback_AGMCommonBehavior_activateAgent(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_activateAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_deactivateAgent : public Callback_AGMCommonBehavior_deactivateAgent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_AGMCommonBehavior_deactivateAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deactivateAgent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AGMCommonBehavior_deactivateAgentPtr
newCallback_AGMCommonBehavior_deactivateAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_deactivateAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_deactivateAgentPtr
newCallback_AGMCommonBehavior_deactivateAgent(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_deactivateAgent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_deactivateAgent : public Callback_AGMCommonBehavior_deactivateAgent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_AGMCommonBehavior_deactivateAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deactivateAgent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_deactivateAgentPtr
newCallback_AGMCommonBehavior_deactivateAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_deactivateAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_deactivateAgentPtr
newCallback_AGMCommonBehavior_deactivateAgent(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_deactivateAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_getAgentState : public Callback_AGMCommonBehavior_getAgentState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMCommonBehavior::StateStruct&);

    CallbackNC_AGMCommonBehavior_getAgentState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMCommonBehavior::StateStruct __ret;
        try
        {
            __ret = __proxy->end_getAgentState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AGMCommonBehavior_getAgentStatePtr
newCallback_AGMCommonBehavior_getAgentState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::StateStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_getAgentState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_getAgentStatePtr
newCallback_AGMCommonBehavior_getAgentState(T* instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::StateStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_getAgentState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_getAgentState : public Callback_AGMCommonBehavior_getAgentState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMCommonBehavior::StateStruct&, const CT&);

    Callback_AGMCommonBehavior_getAgentState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMCommonBehavior::StateStruct __ret;
        try
        {
            __ret = __proxy->end_getAgentState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_getAgentStatePtr
newCallback_AGMCommonBehavior_getAgentState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::StateStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_getAgentState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_getAgentStatePtr
newCallback_AGMCommonBehavior_getAgentState(T* instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::StateStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_getAgentState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_getAgentParameters : public Callback_AGMCommonBehavior_getAgentParameters_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMCommonBehavior::ParameterMap&);

    CallbackNC_AGMCommonBehavior_getAgentParameters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMCommonBehavior::ParameterMap __ret;
        try
        {
            __ret = __proxy->end_getAgentParameters(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AGMCommonBehavior_getAgentParametersPtr
newCallback_AGMCommonBehavior_getAgentParameters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::ParameterMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_getAgentParameters<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_getAgentParametersPtr
newCallback_AGMCommonBehavior_getAgentParameters(T* instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::ParameterMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_getAgentParameters<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_getAgentParameters : public Callback_AGMCommonBehavior_getAgentParameters_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMCommonBehavior::ParameterMap&, const CT&);

    Callback_AGMCommonBehavior_getAgentParameters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMCommonBehavior::ParameterMap __ret;
        try
        {
            __ret = __proxy->end_getAgentParameters(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_getAgentParametersPtr
newCallback_AGMCommonBehavior_getAgentParameters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::ParameterMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_getAgentParameters<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_getAgentParametersPtr
newCallback_AGMCommonBehavior_getAgentParameters(T* instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::ParameterMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_getAgentParameters<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_setAgentParameters : public Callback_AGMCommonBehavior_setAgentParameters_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_AGMCommonBehavior_setAgentParameters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setAgentParameters(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AGMCommonBehavior_setAgentParametersPtr
newCallback_AGMCommonBehavior_setAgentParameters(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_setAgentParameters<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_setAgentParametersPtr
newCallback_AGMCommonBehavior_setAgentParameters(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_setAgentParameters<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_setAgentParameters : public Callback_AGMCommonBehavior_setAgentParameters_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_AGMCommonBehavior_setAgentParameters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setAgentParameters(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_setAgentParametersPtr
newCallback_AGMCommonBehavior_setAgentParameters(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_setAgentParameters<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_setAgentParametersPtr
newCallback_AGMCommonBehavior_setAgentParameters(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_setAgentParameters<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_killAgent : public Callback_AGMCommonBehavior_killAgent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMCommonBehavior_killAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_killAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_killAgent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_killAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_killAgent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_killAgent : public Callback_AGMCommonBehavior_killAgent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMCommonBehavior_killAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_killAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_killAgent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_killAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_killAgent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_uptimeAgent : public Callback_AGMCommonBehavior_uptimeAgent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AGMCommonBehavior_uptimeAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_uptimeAgent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AGMCommonBehavior_uptimeAgentPtr
newCallback_AGMCommonBehavior_uptimeAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_uptimeAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_uptimeAgentPtr
newCallback_AGMCommonBehavior_uptimeAgent(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_uptimeAgent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_uptimeAgent : public Callback_AGMCommonBehavior_uptimeAgent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AGMCommonBehavior_uptimeAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_uptimeAgent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_uptimeAgentPtr
newCallback_AGMCommonBehavior_uptimeAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_uptimeAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_uptimeAgentPtr
newCallback_AGMCommonBehavior_uptimeAgent(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_uptimeAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_reloadConfigAgent : public Callback_AGMCommonBehavior_reloadConfigAgent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_AGMCommonBehavior_reloadConfigAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_reloadConfigAgent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AGMCommonBehavior_reloadConfigAgentPtr
newCallback_AGMCommonBehavior_reloadConfigAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_reloadConfigAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_reloadConfigAgentPtr
newCallback_AGMCommonBehavior_reloadConfigAgent(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_reloadConfigAgent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_reloadConfigAgent : public Callback_AGMCommonBehavior_reloadConfigAgent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_AGMCommonBehavior_reloadConfigAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx __proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_reloadConfigAgent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_reloadConfigAgentPtr
newCallback_AGMCommonBehavior_reloadConfigAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_reloadConfigAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_reloadConfigAgentPtr
newCallback_AGMCommonBehavior_reloadConfigAgent(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_reloadConfigAgent<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
