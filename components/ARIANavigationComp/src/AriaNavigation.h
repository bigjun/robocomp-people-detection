// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AriaNavigation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____AriaNavigation_h__
#define ____AriaNavigation_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompAriaNavigation
{

class AriaNavigation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAriaNavigation::AriaNavigation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompAriaNavigation::AriaNavigation*);

}

}

namespace RoboCompAriaNavigation
{

class AriaNavigation;
bool operator==(const AriaNavigation&, const AriaNavigation&);
bool operator<(const AriaNavigation&, const AriaNavigation&);
::Ice::Object* upCast(::RoboCompAriaNavigation::AriaNavigation*);
typedef ::IceInternal::Handle< ::RoboCompAriaNavigation::AriaNavigation> AriaNavigationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAriaNavigation::AriaNavigation> AriaNavigationPrx;
void __patch(AriaNavigationPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompAriaNavigation
{

struct personPose
{
    ::Ice::Int x;
    ::Ice::Int y;
    ::Ice::Int th;

    bool operator==(const personPose& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(th != __rhs.th)
        {
            return false;
        }
        return true;
    }

    bool operator<(const personPose& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(th < __rhs.th)
        {
            return true;
        }
        else if(__rhs.th < th)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const personPose& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const personPose& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const personPose& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const personPose& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompAriaNavigation::personPose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompAriaNavigation::personPose, S>
{
    static void write(S* __os, const ::RoboCompAriaNavigation::personPose& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.th);
    }
};

template<class S>
struct StreamReader< ::RoboCompAriaNavigation::personPose, S>
{
    static void read(S* __is, ::RoboCompAriaNavigation::personPose& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.th);
    }
};

}

namespace RoboCompAriaNavigation
{

class Callback_AriaNavigation_wanderMode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AriaNavigation_wanderMode_Base> Callback_AriaNavigation_wanderModePtr;

class Callback_AriaNavigation_setSafeDrive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AriaNavigation_setSafeDrive_Base> Callback_AriaNavigation_setSafeDrivePtr;

class Callback_AriaNavigation_stopRobot_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AriaNavigation_stopRobot_Base> Callback_AriaNavigation_stopRobotPtr;

class Callback_AriaNavigation_goToGoal_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AriaNavigation_goToGoal_Base> Callback_AriaNavigation_goToGoalPtr;

class Callback_AriaNavigation_getGoals_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AriaNavigation_getGoals_Base> Callback_AriaNavigation_getGoalsPtr;

class Callback_AriaNavigation_getRobotPosition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AriaNavigation_getRobotPosition_Base> Callback_AriaNavigation_getRobotPositionPtr;

class Callback_AriaNavigation_getGoalPositions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AriaNavigation_getGoalPositions_Base> Callback_AriaNavigation_getGoalPositionsPtr;

class Callback_AriaNavigation_getInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AriaNavigation_getInfo_Base> Callback_AriaNavigation_getInfoPtr;

class Callback_AriaNavigation_checkGoalDone_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AriaNavigation_checkGoalDone_Base> Callback_AriaNavigation_checkGoalDonePtr;

class Callback_AriaNavigation_checkPathPlannerStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AriaNavigation_checkPathPlannerStatus_Base> Callback_AriaNavigation_checkPathPlannerStatusPtr;

class Callback_AriaNavigation_goToPose_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AriaNavigation_goToPose_Base> Callback_AriaNavigation_goToPosePtr;

}

namespace IceProxy
{

namespace RoboCompAriaNavigation
{

class AriaNavigation : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int wanderMode(bool activate)
    {
        return wanderMode(activate, 0);
    }
    ::Ice::Int wanderMode(bool activate, const ::Ice::Context& __ctx)
    {
        return wanderMode(activate, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_wanderMode(bool activate, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_wanderMode(activate, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_wanderMode(bool activate, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_wanderMode(activate, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_wanderMode(bool activate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_wanderMode(activate, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_wanderMode(bool activate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_wanderMode(activate, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_wanderMode(bool activate, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_wanderMode(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_wanderMode(activate, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_wanderMode(bool activate)
    {
        return begin_wanderMode(activate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_wanderMode(bool activate, const ::Ice::Context& __ctx)
    {
        return begin_wanderMode(activate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_wanderMode(bool activate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wanderMode(activate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wanderMode(bool activate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wanderMode(activate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wanderMode(bool activate, const ::RoboCompAriaNavigation::Callback_AriaNavigation_wanderModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wanderMode(activate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wanderMode(bool activate, const ::Ice::Context& __ctx, const ::RoboCompAriaNavigation::Callback_AriaNavigation_wanderModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wanderMode(activate, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_wanderMode(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int wanderMode(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_wanderMode(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int setSafeDrive(bool activate)
    {
        return setSafeDrive(activate, 0);
    }
    ::Ice::Int setSafeDrive(bool activate, const ::Ice::Context& __ctx)
    {
        return setSafeDrive(activate, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSafeDrive(bool activate, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSafeDrive(activate, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSafeDrive(bool activate, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSafeDrive(activate, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSafeDrive(bool activate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSafeDrive(activate, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSafeDrive(bool activate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSafeDrive(activate, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setSafeDrive(bool activate, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_setSafeDrive(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_setSafeDrive(activate, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setSafeDrive(bool activate)
    {
        return begin_setSafeDrive(activate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSafeDrive(bool activate, const ::Ice::Context& __ctx)
    {
        return begin_setSafeDrive(activate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSafeDrive(bool activate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSafeDrive(activate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSafeDrive(bool activate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSafeDrive(activate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSafeDrive(bool activate, const ::RoboCompAriaNavigation::Callback_AriaNavigation_setSafeDrivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSafeDrive(activate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSafeDrive(bool activate, const ::Ice::Context& __ctx, const ::RoboCompAriaNavigation::Callback_AriaNavigation_setSafeDrivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSafeDrive(activate, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_setSafeDrive(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int setSafeDrive(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSafeDrive(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int stopRobot()
    {
        return stopRobot(0);
    }
    ::Ice::Int stopRobot(const ::Ice::Context& __ctx)
    {
        return stopRobot(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stopRobot(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stopRobot(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stopRobot(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopRobot(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopRobot(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stopRobot(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stopRobot(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopRobot(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_stopRobot(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_stopRobot(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_stopRobot(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_stopRobot()
    {
        return begin_stopRobot(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopRobot(const ::Ice::Context& __ctx)
    {
        return begin_stopRobot(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopRobot(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopRobot(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopRobot(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopRobot(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopRobot(const ::RoboCompAriaNavigation::Callback_AriaNavigation_stopRobotPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopRobot(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopRobot(const ::Ice::Context& __ctx, const ::RoboCompAriaNavigation::Callback_AriaNavigation_stopRobotPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopRobot(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_stopRobot(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int stopRobot(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stopRobot(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int goToGoal(const ::std::string& name)
    {
        return goToGoal(name, 0);
    }
    ::Ice::Int goToGoal(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return goToGoal(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_goToGoal(const ::std::string& name, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goToGoal(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goToGoal(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goToGoal(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_goToGoal(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goToGoal(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goToGoal(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goToGoal(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_goToGoal(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_goToGoal(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_goToGoal(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_goToGoal(const ::std::string& name)
    {
        return begin_goToGoal(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goToGoal(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_goToGoal(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goToGoal(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goToGoal(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goToGoal(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goToGoal(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goToGoal(const ::std::string& name, const ::RoboCompAriaNavigation::Callback_AriaNavigation_goToGoalPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goToGoal(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goToGoal(const ::std::string& name, const ::Ice::Context& __ctx, const ::RoboCompAriaNavigation::Callback_AriaNavigation_goToGoalPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goToGoal(name, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_goToGoal(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int goToGoal(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_goToGoal(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getGoals()
    {
        return getGoals(0);
    }
    ::Ice::Int getGoals(const ::Ice::Context& __ctx)
    {
        return getGoals(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getGoals(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGoals(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGoals(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGoals(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getGoals(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGoals(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGoals(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGoals(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getGoals(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getGoals(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getGoals(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getGoals()
    {
        return begin_getGoals(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGoals(const ::Ice::Context& __ctx)
    {
        return begin_getGoals(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGoals(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGoals(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGoals(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGoals(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGoals(const ::RoboCompAriaNavigation::Callback_AriaNavigation_getGoalsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGoals(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGoals(const ::Ice::Context& __ctx, const ::RoboCompAriaNavigation::Callback_AriaNavigation_getGoalsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGoals(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getGoals(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getGoals(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getGoals(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getRobotPosition()
    {
        return getRobotPosition(0);
    }
    ::Ice::Int getRobotPosition(const ::Ice::Context& __ctx)
    {
        return getRobotPosition(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRobotPosition(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRobotPosition(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRobotPosition(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRobotPosition(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRobotPosition(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRobotPosition(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRobotPosition(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRobotPosition(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRobotPosition(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getRobotPosition(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getRobotPosition(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRobotPosition()
    {
        return begin_getRobotPosition(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRobotPosition(const ::Ice::Context& __ctx)
    {
        return begin_getRobotPosition(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRobotPosition(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRobotPosition(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRobotPosition(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRobotPosition(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRobotPosition(const ::RoboCompAriaNavigation::Callback_AriaNavigation_getRobotPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRobotPosition(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRobotPosition(const ::Ice::Context& __ctx, const ::RoboCompAriaNavigation::Callback_AriaNavigation_getRobotPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRobotPosition(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getRobotPosition(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getRobotPosition(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRobotPosition(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getGoalPositions()
    {
        return getGoalPositions(0);
    }
    ::Ice::Int getGoalPositions(const ::Ice::Context& __ctx)
    {
        return getGoalPositions(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getGoalPositions(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGoalPositions(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGoalPositions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGoalPositions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getGoalPositions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGoalPositions(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGoalPositions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGoalPositions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getGoalPositions(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getGoalPositions(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getGoalPositions(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getGoalPositions()
    {
        return begin_getGoalPositions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGoalPositions(const ::Ice::Context& __ctx)
    {
        return begin_getGoalPositions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGoalPositions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGoalPositions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGoalPositions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGoalPositions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGoalPositions(const ::RoboCompAriaNavigation::Callback_AriaNavigation_getGoalPositionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGoalPositions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGoalPositions(const ::Ice::Context& __ctx, const ::RoboCompAriaNavigation::Callback_AriaNavigation_getGoalPositionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGoalPositions(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getGoalPositions(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getGoalPositions(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getGoalPositions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getInfo()
    {
        return getInfo(0);
    }
    ::Ice::Int getInfo(const ::Ice::Context& __ctx)
    {
        return getInfo(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getInfo(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInfo(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInfo(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInfo(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInfo(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInfo(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getInfo(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getInfo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getInfo(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getInfo()
    {
        return begin_getInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInfo(const ::Ice::Context& __ctx)
    {
        return begin_getInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInfo(const ::RoboCompAriaNavigation::Callback_AriaNavigation_getInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInfo(const ::Ice::Context& __ctx, const ::RoboCompAriaNavigation::Callback_AriaNavigation_getInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInfo(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int checkGoalDone()
    {
        return checkGoalDone(0);
    }
    ::Ice::Int checkGoalDone(const ::Ice::Context& __ctx)
    {
        return checkGoalDone(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_checkGoalDone(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkGoalDone(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkGoalDone(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkGoalDone(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_checkGoalDone(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkGoalDone(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkGoalDone(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkGoalDone(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_checkGoalDone(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_checkGoalDone(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_checkGoalDone(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_checkGoalDone()
    {
        return begin_checkGoalDone(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkGoalDone(const ::Ice::Context& __ctx)
    {
        return begin_checkGoalDone(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkGoalDone(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkGoalDone(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkGoalDone(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkGoalDone(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkGoalDone(const ::RoboCompAriaNavigation::Callback_AriaNavigation_checkGoalDonePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkGoalDone(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkGoalDone(const ::Ice::Context& __ctx, const ::RoboCompAriaNavigation::Callback_AriaNavigation_checkGoalDonePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkGoalDone(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_checkGoalDone(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int checkGoalDone(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_checkGoalDone(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int checkPathPlannerStatus()
    {
        return checkPathPlannerStatus(0);
    }
    ::Ice::Int checkPathPlannerStatus(const ::Ice::Context& __ctx)
    {
        return checkPathPlannerStatus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_checkPathPlannerStatus(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkPathPlannerStatus(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkPathPlannerStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkPathPlannerStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_checkPathPlannerStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkPathPlannerStatus(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkPathPlannerStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkPathPlannerStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_checkPathPlannerStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_checkPathPlannerStatus(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_checkPathPlannerStatus(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_checkPathPlannerStatus()
    {
        return begin_checkPathPlannerStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkPathPlannerStatus(const ::Ice::Context& __ctx)
    {
        return begin_checkPathPlannerStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkPathPlannerStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkPathPlannerStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkPathPlannerStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkPathPlannerStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkPathPlannerStatus(const ::RoboCompAriaNavigation::Callback_AriaNavigation_checkPathPlannerStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkPathPlannerStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkPathPlannerStatus(const ::Ice::Context& __ctx, const ::RoboCompAriaNavigation::Callback_AriaNavigation_checkPathPlannerStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkPathPlannerStatus(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_checkPathPlannerStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int checkPathPlannerStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_checkPathPlannerStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int goToPose(const ::RoboCompAriaNavigation::personPose& p)
    {
        return goToPose(p, 0);
    }
    ::Ice::Int goToPose(const ::RoboCompAriaNavigation::personPose& p, const ::Ice::Context& __ctx)
    {
        return goToPose(p, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_goToPose(const ::RoboCompAriaNavigation::personPose& p, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goToPose(p, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goToPose(const ::RoboCompAriaNavigation::personPose& p, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goToPose(p, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_goToPose(const ::RoboCompAriaNavigation::personPose& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goToPose(p, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goToPose(const ::RoboCompAriaNavigation::personPose& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goToPose(p, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_goToPose(const ::RoboCompAriaNavigation::personPose& p, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_goToPose(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_goToPose(p, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_goToPose(const ::RoboCompAriaNavigation::personPose& p)
    {
        return begin_goToPose(p, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goToPose(const ::RoboCompAriaNavigation::personPose& p, const ::Ice::Context& __ctx)
    {
        return begin_goToPose(p, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goToPose(const ::RoboCompAriaNavigation::personPose& p, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goToPose(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goToPose(const ::RoboCompAriaNavigation::personPose& p, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goToPose(p, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goToPose(const ::RoboCompAriaNavigation::personPose& p, const ::RoboCompAriaNavigation::Callback_AriaNavigation_goToPosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goToPose(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goToPose(const ::RoboCompAriaNavigation::personPose& p, const ::Ice::Context& __ctx, const ::RoboCompAriaNavigation::Callback_AriaNavigation_goToPosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goToPose(p, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_goToPose(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int goToPose(const ::RoboCompAriaNavigation::personPose&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_goToPose(const ::RoboCompAriaNavigation::personPose&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_secure(bool __secure) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_twoway() const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_oneway() const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_batchOneway() const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_datagram() const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_batchDatagram() const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_compress(bool __compress) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AriaNavigation> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AriaNavigation*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompAriaNavigation
{

class AriaNavigation : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int wanderMode(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int setSafeDrive(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int stopRobot(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int goToGoal(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getGoals(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getRobotPosition(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getGoalPositions(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int checkGoalDone(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int checkPathPlannerStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int goToPose(const ::RoboCompAriaNavigation::personPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompAriaNavigation
{

class AriaNavigation : virtual public ::IceDelegate::RoboCompAriaNavigation::AriaNavigation,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int wanderMode(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int setSafeDrive(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int stopRobot(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int goToGoal(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getGoals(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getRobotPosition(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getGoalPositions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int checkGoalDone(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int checkPathPlannerStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int goToPose(const ::RoboCompAriaNavigation::personPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompAriaNavigation
{

class AriaNavigation : virtual public ::IceDelegate::RoboCompAriaNavigation::AriaNavigation,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int wanderMode(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int setSafeDrive(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int stopRobot(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int goToGoal(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getGoals(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getRobotPosition(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getGoalPositions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int checkGoalDone(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int checkPathPlannerStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int goToPose(const ::RoboCompAriaNavigation::personPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompAriaNavigation
{

class AriaNavigation : virtual public ::Ice::Object
{
public:

    typedef AriaNavigationPrx ProxyType;
    typedef AriaNavigationPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int wanderMode(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___wanderMode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int setSafeDrive(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSafeDrive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int stopRobot(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stopRobot(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int goToGoal(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___goToGoal(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getGoals(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getGoals(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getRobotPosition(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRobotPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getGoalPositions(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getGoalPositions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int checkGoalDone(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___checkGoalDone(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int checkPathPlannerStatus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___checkPathPlannerStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int goToPose(const ::RoboCompAriaNavigation::personPose&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___goToPose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const AriaNavigation& l, const AriaNavigation& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AriaNavigation& l, const AriaNavigation& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompAriaNavigation
{

template<class T>
class CallbackNC_AriaNavigation_wanderMode : public Callback_AriaNavigation_wanderMode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AriaNavigation_wanderMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_wanderMode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AriaNavigation_wanderModePtr
newCallback_AriaNavigation_wanderMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_wanderMode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AriaNavigation_wanderModePtr
newCallback_AriaNavigation_wanderMode(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_wanderMode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AriaNavigation_wanderMode : public Callback_AriaNavigation_wanderMode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AriaNavigation_wanderMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_wanderMode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AriaNavigation_wanderModePtr
newCallback_AriaNavigation_wanderMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_wanderMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AriaNavigation_wanderModePtr
newCallback_AriaNavigation_wanderMode(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_wanderMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AriaNavigation_setSafeDrive : public Callback_AriaNavigation_setSafeDrive_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AriaNavigation_setSafeDrive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setSafeDrive(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AriaNavigation_setSafeDrivePtr
newCallback_AriaNavigation_setSafeDrive(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_setSafeDrive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AriaNavigation_setSafeDrivePtr
newCallback_AriaNavigation_setSafeDrive(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_setSafeDrive<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AriaNavigation_setSafeDrive : public Callback_AriaNavigation_setSafeDrive_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AriaNavigation_setSafeDrive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setSafeDrive(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AriaNavigation_setSafeDrivePtr
newCallback_AriaNavigation_setSafeDrive(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_setSafeDrive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AriaNavigation_setSafeDrivePtr
newCallback_AriaNavigation_setSafeDrive(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_setSafeDrive<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AriaNavigation_stopRobot : public Callback_AriaNavigation_stopRobot_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AriaNavigation_stopRobot(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_stopRobot(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AriaNavigation_stopRobotPtr
newCallback_AriaNavigation_stopRobot(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_stopRobot<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AriaNavigation_stopRobotPtr
newCallback_AriaNavigation_stopRobot(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_stopRobot<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AriaNavigation_stopRobot : public Callback_AriaNavigation_stopRobot_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AriaNavigation_stopRobot(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_stopRobot(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AriaNavigation_stopRobotPtr
newCallback_AriaNavigation_stopRobot(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_stopRobot<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AriaNavigation_stopRobotPtr
newCallback_AriaNavigation_stopRobot(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_stopRobot<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AriaNavigation_goToGoal : public Callback_AriaNavigation_goToGoal_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AriaNavigation_goToGoal(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_goToGoal(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AriaNavigation_goToGoalPtr
newCallback_AriaNavigation_goToGoal(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_goToGoal<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AriaNavigation_goToGoalPtr
newCallback_AriaNavigation_goToGoal(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_goToGoal<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AriaNavigation_goToGoal : public Callback_AriaNavigation_goToGoal_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AriaNavigation_goToGoal(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_goToGoal(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AriaNavigation_goToGoalPtr
newCallback_AriaNavigation_goToGoal(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_goToGoal<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AriaNavigation_goToGoalPtr
newCallback_AriaNavigation_goToGoal(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_goToGoal<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AriaNavigation_getGoals : public Callback_AriaNavigation_getGoals_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AriaNavigation_getGoals(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getGoals(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AriaNavigation_getGoalsPtr
newCallback_AriaNavigation_getGoals(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_getGoals<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AriaNavigation_getGoalsPtr
newCallback_AriaNavigation_getGoals(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_getGoals<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AriaNavigation_getGoals : public Callback_AriaNavigation_getGoals_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AriaNavigation_getGoals(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getGoals(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AriaNavigation_getGoalsPtr
newCallback_AriaNavigation_getGoals(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_getGoals<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AriaNavigation_getGoalsPtr
newCallback_AriaNavigation_getGoals(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_getGoals<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AriaNavigation_getRobotPosition : public Callback_AriaNavigation_getRobotPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AriaNavigation_getRobotPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getRobotPosition(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AriaNavigation_getRobotPositionPtr
newCallback_AriaNavigation_getRobotPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_getRobotPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AriaNavigation_getRobotPositionPtr
newCallback_AriaNavigation_getRobotPosition(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_getRobotPosition<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AriaNavigation_getRobotPosition : public Callback_AriaNavigation_getRobotPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AriaNavigation_getRobotPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getRobotPosition(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AriaNavigation_getRobotPositionPtr
newCallback_AriaNavigation_getRobotPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_getRobotPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AriaNavigation_getRobotPositionPtr
newCallback_AriaNavigation_getRobotPosition(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_getRobotPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AriaNavigation_getGoalPositions : public Callback_AriaNavigation_getGoalPositions_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AriaNavigation_getGoalPositions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getGoalPositions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AriaNavigation_getGoalPositionsPtr
newCallback_AriaNavigation_getGoalPositions(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_getGoalPositions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AriaNavigation_getGoalPositionsPtr
newCallback_AriaNavigation_getGoalPositions(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_getGoalPositions<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AriaNavigation_getGoalPositions : public Callback_AriaNavigation_getGoalPositions_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AriaNavigation_getGoalPositions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getGoalPositions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AriaNavigation_getGoalPositionsPtr
newCallback_AriaNavigation_getGoalPositions(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_getGoalPositions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AriaNavigation_getGoalPositionsPtr
newCallback_AriaNavigation_getGoalPositions(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_getGoalPositions<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AriaNavigation_getInfo : public Callback_AriaNavigation_getInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AriaNavigation_getInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AriaNavigation_getInfoPtr
newCallback_AriaNavigation_getInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_getInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AriaNavigation_getInfoPtr
newCallback_AriaNavigation_getInfo(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_getInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AriaNavigation_getInfo : public Callback_AriaNavigation_getInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AriaNavigation_getInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AriaNavigation_getInfoPtr
newCallback_AriaNavigation_getInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_getInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AriaNavigation_getInfoPtr
newCallback_AriaNavigation_getInfo(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_getInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AriaNavigation_checkGoalDone : public Callback_AriaNavigation_checkGoalDone_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AriaNavigation_checkGoalDone(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_checkGoalDone(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AriaNavigation_checkGoalDonePtr
newCallback_AriaNavigation_checkGoalDone(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_checkGoalDone<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AriaNavigation_checkGoalDonePtr
newCallback_AriaNavigation_checkGoalDone(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_checkGoalDone<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AriaNavigation_checkGoalDone : public Callback_AriaNavigation_checkGoalDone_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AriaNavigation_checkGoalDone(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_checkGoalDone(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AriaNavigation_checkGoalDonePtr
newCallback_AriaNavigation_checkGoalDone(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_checkGoalDone<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AriaNavigation_checkGoalDonePtr
newCallback_AriaNavigation_checkGoalDone(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_checkGoalDone<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AriaNavigation_checkPathPlannerStatus : public Callback_AriaNavigation_checkPathPlannerStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AriaNavigation_checkPathPlannerStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_checkPathPlannerStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AriaNavigation_checkPathPlannerStatusPtr
newCallback_AriaNavigation_checkPathPlannerStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_checkPathPlannerStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AriaNavigation_checkPathPlannerStatusPtr
newCallback_AriaNavigation_checkPathPlannerStatus(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_checkPathPlannerStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AriaNavigation_checkPathPlannerStatus : public Callback_AriaNavigation_checkPathPlannerStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AriaNavigation_checkPathPlannerStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_checkPathPlannerStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AriaNavigation_checkPathPlannerStatusPtr
newCallback_AriaNavigation_checkPathPlannerStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_checkPathPlannerStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AriaNavigation_checkPathPlannerStatusPtr
newCallback_AriaNavigation_checkPathPlannerStatus(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_checkPathPlannerStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AriaNavigation_goToPose : public Callback_AriaNavigation_goToPose_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AriaNavigation_goToPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_goToPose(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AriaNavigation_goToPosePtr
newCallback_AriaNavigation_goToPose(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_goToPose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AriaNavigation_goToPosePtr
newCallback_AriaNavigation_goToPose(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AriaNavigation_goToPose<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AriaNavigation_goToPose : public Callback_AriaNavigation_goToPose_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AriaNavigation_goToPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAriaNavigation::AriaNavigationPrx __proxy = ::RoboCompAriaNavigation::AriaNavigationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_goToPose(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AriaNavigation_goToPosePtr
newCallback_AriaNavigation_goToPose(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_goToPose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AriaNavigation_goToPosePtr
newCallback_AriaNavigation_goToPose(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AriaNavigation_goToPose<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
